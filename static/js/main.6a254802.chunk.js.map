{"version":3,"sources":["Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["Pomodoro","props","state","breakLength","sessionLength","timerLength","running","currentStatus","style","color","increaseBreak","bind","decreaseBreak","increaseSession","decreaseSession","resetClock","timeFormat","handleTimer","startTimer","clearInterval","this","timer","setState","prevState","song","document","getElementById","pause","currentTime","mins","Math","floor","secs","play","setInterval","className","id","onClick","src","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a254802.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Pomodoro extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      timerLength: 1500,\r\n      running: false,\r\n      currentStatus: \"Session\",\r\n      style: { color: `#000` },\r\n    };\r\n    this.increaseBreak = this.increaseBreak.bind(this);\r\n    this.decreaseBreak = this.decreaseBreak.bind(this);\r\n    this.increaseSession = this.increaseSession.bind(this);\r\n    this.decreaseSession = this.decreaseSession.bind(this);\r\n    this.resetClock = this.resetClock.bind(this);\r\n    this.timeFormat = this.timeFormat.bind(this);\r\n    this.handleTimer = this.handleTimer.bind(this);\r\n    this.startTimer = this.startTimer.bind(this);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  increaseBreak() {\r\n    if (this.state.breakLength < 60) {\r\n      this.setState((prevState) => ({\r\n        breakLength: prevState.breakLength + 1,\r\n      }));\r\n    }\r\n  }\r\n  decreaseBreak() {\r\n    if (this.state.breakLength > 1) {\r\n      this.setState((prevState) => ({\r\n        breakLength: prevState.breakLength - 1,\r\n      }));\r\n    }\r\n  }\r\n  increaseSession() {\r\n    if (this.state.sessionLength < 60) {\r\n      this.setState((prevState) => ({\r\n        sessionLength: prevState.sessionLength + 1,\r\n        timerLength: prevState.timerLength + 60,\r\n      }));\r\n    }\r\n  }\r\n  decreaseSession() {\r\n    if (this.state.sessionLength > 1) {\r\n      this.setState((prevState) => ({\r\n        sessionLength: prevState.sessionLength - 1,\r\n        timerLength: prevState.timerLength - 60,\r\n      }));\r\n    }\r\n  }\r\n  resetClock() {\r\n    let song = document.getElementById(\"beep\");\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      timerLength: 1500,\r\n      running: false,\r\n      currentStatus: \"Session\",\r\n      style: { color: `#000` },\r\n    });\r\n    song.pause();\r\n    song.currentTime = 0;\r\n  }\r\n  timeFormat() {\r\n    let mins = Math.floor(this.state.timerLength / 60);\r\n    let secs = this.state.timerLength - mins * 60;\r\n    secs = secs < 10 ? \"0\" + secs : secs;\r\n    mins = mins < 10 ? \"0\" + mins : mins;\r\n    return mins + \":\" + secs;\r\n  }\r\n  handleTimer() {\r\n    const song = document.getElementById(\"beep\");\r\n    if (this.state.timerLength <= 60 && this.state.timerLength >= 0) {\r\n      this.setState({ style: { color: `red` } });\r\n    } else {\r\n      this.setState({ style: { color: `#000` } });\r\n    }\r\n    if (this.state.currentStatus === \"Session\") {\r\n      if (this.state.timerLength >= 1) {\r\n        this.setState((prevState) => ({\r\n          timerLength: prevState.timerLength - 1,\r\n          running: true,\r\n        }));\r\n      } else if (this.state.timerLength === 0) {\r\n        song.play();\r\n        this.setState({\r\n          running: false,\r\n          timerLength: this.state.breakLength * 60,\r\n          currentStatus: \"Break\",\r\n        });\r\n      } else {\r\n        this.setState({\r\n          running: false,\r\n        });\r\n      }\r\n    } else if (this.state.currentStatus === \"Break\") {\r\n      if (this.state.timerLength >= 1) {\r\n        this.setState((prevState) => ({\r\n          timerLength: prevState.timerLength - 1,\r\n          running: true,\r\n        }));\r\n      } else if (this.state.timerLength === 0) {\r\n        song.play();\r\n        this.setState({\r\n          running: false,\r\n          timerLength: this.state.sessionLength * 60,\r\n          currentStatus: \"Session\",\r\n        });\r\n      } else {\r\n        this.setState({\r\n          running: false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  startTimer() {\r\n    if (!this.state.running) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(this.handleTimer, 1000);\r\n      this.setState({\r\n        running: true,\r\n      });\r\n    } else {\r\n      clearInterval(this.timer);\r\n      this.setState({\r\n        running: false,\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Pomodoro Clock</h1>\r\n        <div className=\"break-session\">\r\n          <div className=\"break\">\r\n            <div id=\"break-label\">Break Length</div>\r\n            <div>\r\n              <button id=\"break-decrement\" onClick={this.decreaseBreak}>\r\n                <img\r\n                  src=\"https://cdn0.iconfinder.com/data/icons/typicons-2/24/arrow-down-64.png\"\r\n                  alt=\"Decrease Button\"\r\n                />\r\n              </button>\r\n              <span id=\"break-length\">{this.state.breakLength}</span>\r\n              <button id=\"break-increment\" onClick={this.increaseBreak}>\r\n                <img\r\n                  src=\"https://cdn0.iconfinder.com/data/icons/typicons-2/24/arrow-up-64.png\"\r\n                  alt=\"Increase Button\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"session\">\r\n            <div id=\"session-label\">Session Length</div>\r\n            <div>\r\n              <button id=\"session-decrement\" onClick={this.decreaseSession}>\r\n                <img\r\n                  src=\"https://cdn0.iconfinder.com/data/icons/typicons-2/24/arrow-down-64.png\"\r\n                  alt=\"Decrease Button\"\r\n                />\r\n              </button>\r\n              <span id=\"session-length\">{this.state.sessionLength}</span>\r\n              <button id=\"session-increment\" onClick={this.increaseSession}>\r\n                <img\r\n                  src=\"https://cdn0.iconfinder.com/data/icons/typicons-2/24/arrow-up-64.png\"\r\n                  alt=\"Increase Button\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"timer\" style={this.state.style}>\r\n          <h3 id=\"timer-label\">{this.state.currentStatus}</h3>\r\n          <h1 id=\"time-left\">{this.timeFormat()}</h1>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <button id=\"start_stop\" onClick={this.startTimer}>\r\n            <img\r\n              src=\"https://cdn4.iconfinder.com/data/icons/essential-app-2/16/play-pause-music-player-64.png\"\r\n              alt=\"Play/Pause\"\r\n            />\r\n          </button>\r\n          <button id=\"reset\" onClick={this.resetClock}>\r\n            <img\r\n              src=\"https://cdn0.iconfinder.com/data/icons/faticons-2/29/refresh27-64.png\"\r\n              alt=\"Reset\"\r\n            />\r\n          </button>\r\n          <audio\r\n            id=\"beep\"\r\n            src=\"https://actions.google.com/sounds/v1/alarms/digital_watch_alarm_long.ogg\"\r\n          ></audio>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pomodoro;\r\n","import React from 'react';\nimport './App.css';\nimport Pomodoro from \"./Pomodoro\"\n\nfunction App() {\n  return (\n    <Pomodoro />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}